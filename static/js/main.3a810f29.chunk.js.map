{"version":3,"sources":["assets/images/birthday1.png","constants/numOfQuestions.js","components/Header/index.js","constants/categories.js","constants/countdownTime.js","constants/difficulty.js","constants/questionsType.js","components/Main/index.js","components/Loader/index.js","components/Countdown/index.js","utils/timeConverter.js","components/Result/QA.js","components/Result/index.js","components/Offline/index.js","utils/getRandomNumber.js","components/Quiz/index.js","components/App/index.js","api/index.js","serviceWorker.js","index.js"],"names":["module","exports","Header","props","state","promptEvent","appAccepted","window","addEventListener","e","preventDefault","setState","installApp","bind","this","prompt","userChoice","then","result","outcome","isAppInstalled","matchMedia","matches","Menu","stackable","inverted","size","Item","style","color","cursor","position","Button","content","icon","labelPosition","onClick","Component","CATEGORIES","key","text","value","NUM_OF_QUESTIONS","i","object","push","DIFFICULTY","points","QUESTIONS_TYPE","COUNTDOWN_TIME","Main","category","numOfQ","difficulty","type","time","setValue","getValue","name","allFieldsSelected","selectedValues","Container","Segment","Group","divided","Image","src","birthdayImg","Content","Meta","fontSize","lineHeight","map","item","marginTop","active","List","selection","verticalAlign","Dropdown","display","fluid","placeholder","options","defaultValue","onChange","console","info","Extra","primary","startQuiz","disabled","Loader","Message","Icon","loading","Countdown","countdownTime","timerStart","timerTime","totalTime","timer","setInterval","newTime","clearInterval","Swal","fire","title","onClose","timesUp","startTimer","timeAmount","milliseconds","hours","Math","floor","slice","minutes","seconds","basic","floated","Popup","trigger","QA","questionsAndAnswers","Table","celled","striped","Row","HeaderCell","Body","Cell","question","user_answer","correct_answer","point","Result","activeTab","handleTabClick","backToHome","marginBottom","Offline","getRandomNumber","min","max","ceil","random","Quiz","quizData","isLoading","questionIndex","correctAnswers","userSlectedAns","quizIsCompleted","isOffline","timeTakesToComplete","undefined","setData","handleItemClick","handleNext","renderResult","retakeQuiz","startNewQuiz","resolveError","API","fetch","respone","json","setTimeout","results","catch","error","navigator","onLine","log","length","html","outPut","incorrect_answers","splice","he","decode","currentDifficulty","find","el","resultRef","totalQuestions","as","block","floating","Description","Divider","vertical","option","letter","decodedOption","marginRight","App","isQuizStart","PATH_BASE","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","toast","showConfirmButton","onSuccess","ReactDOM","render","document","getElementById","URL","process","href","origin","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"uFAAAA,EAAOC,QAAU,IAA0B,uC,oGCE3C,I,gHC4EeC,E,YA1Eb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAEDC,MAAQ,CACXC,YAAa,KACbC,aAAa,GAGfC,OAAOC,iBAAiB,uBAAuB,SAAAC,GAC7CA,EAAEC,iBACF,EAAKC,SAAS,CAAEN,YAAaI,OAG/B,EAAKG,WAAa,EAAKA,WAAWC,KAAhB,gBAbD,E,0EAgBL,IAAD,OACHR,EAAgBS,KAAKV,MAArBC,YAGRA,EAAYU,SACZV,EAAYW,WAAWC,MAAK,SAAAC,GACH,aAAnBA,EAAOC,SAET,EAAKR,SAAS,CAAEL,aAAa,S,+BAOzB,IAAD,EAC8BQ,KAAKV,MAAlCC,EADD,EACCA,YAAaC,EADd,EACcA,YACjBc,GAAiB,EASrB,OANEb,OAAOc,WAAW,8BAA8BC,SAChDhB,KAEAc,GAAiB,GAIjB,kBAACG,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAQ,EAACC,KAAK,WAC5B,kBAACH,EAAA,EAAKI,KAAN,KACE,wBACEC,MAAO,CACLC,MAAO,UACPC,OAAQ,YAHZ,wBAUDzB,IAAgBe,GACf,kBAACG,EAAA,EAAKA,KAAN,CAAWQ,SAAS,SAClB,kBAACR,EAAA,EAAKI,KAAN,KACE,kBAACK,EAAA,EAAD,CACEH,MAAM,OACNI,QAAQ,cACRP,KAAK,MACLQ,KAAK,YACLC,cAAc,OACdC,QAAStB,KAAKF,oB,GAjETyB,a,uECkDNC,EArDI,CACjB,CACEC,IAAK,KACLC,KAAM,uBACNC,MAAO,MAET,CACEF,IAAK,KACLC,KAAM,uBACNC,MAAO,MAET,CACEF,IAAK,KACLC,KAAM,uBACNC,MAAO,MAET,CACEF,IAAK,KACLC,KAAM,4BACNC,MAAO,MAET,CACEF,IAAK,KACLC,KAAM,mBACNC,MAAO,MAET,CACEF,IAAK,KACLC,KAAM,YACNC,MAAO,MAET,CACEF,IAAK,KACLC,KAAM,YACNC,MAAO,MAET,CACEF,IAAK,KACLC,KAAM,UACNC,MAAO,MAET,CACEF,IAAK,KACLC,KAAM,WACNC,MAAO,MAET,CACEF,IAAK,KACLC,KAAM,OACNC,MAAO,OFjDLC,EAAmB,GAEhBC,EAAI,EAAGA,GAAK,GAAIA,IAAK,CAC5B,IAAMC,EAAS,CAAEL,IAAKI,EAAGH,KAAK,GAAD,OAAKG,GAAKF,MAAOE,GAC9CD,EAAiBG,KAAKD,GGFxB,IHKeF,QIcAI,EArBI,CACjB,CACEP,IAAK,OACLC,KAAM,iBACNC,MAAO,OACPM,OAAQ,GAEV,CACER,IAAK,SACLC,KAAM,oBACNC,MAAO,SACPM,OAAQ,GAEV,CACER,IAAK,OACLC,KAAM,kBACNC,MAAO,OACPM,OAAQ,ICCGC,EAlBQ,CACrB,CACET,IAAK,IACLC,KAAM,WACNC,MAAO,KAET,CACEF,IAAK,WACLC,KAAM,kBACNC,MAAO,YAET,CACEF,IAAK,UACLC,KAAM,eACNC,MAAO,YFdLQ,EAAiB,GAEdN,EAAI,EAAGA,GAAK,GAAIA,IAAK,CAC5B,IAAMC,EAAS,CAAEL,IAAKI,EAAGH,KAAK,UAAD,OAAYG,EAAZ,YAAyBF,MAAOE,GAC7DM,EAAeJ,KAAKD,GAGPK,QGuLAC,E,YAzKb,WAAY/C,GAAQ,IAAD,8BACjB,4CAAMA,KAEDC,MAAQ,CACX+C,SAAU,KACVC,OAAQ,EACRC,WAAY,SACZC,KAAM,WACNC,KAAM,GAGR,EAAKC,SAAW,EAAKA,SAAS3C,KAAd,gBAChB,EAAK4C,SAAW,EAAKA,SAAS5C,KAAd,gBAZC,E,sEAeV6C,EAAMjB,GACb3B,KAAKH,SAAL,eAAiB+C,EAAOjB,M,+BAGjBiB,GACP,OAAO5C,KAAKV,MAAMsD,K,+BAGV,IAAD,SAC8C5C,KAAKV,MAAlD+C,EADD,EACCA,SAAUC,EADX,EACWA,OAAQC,EADnB,EACmBA,WAAYC,EAD/B,EAC+BA,KAAMC,EADrC,EACqCA,KAExCI,GAAoB,EACpBC,EAAiB,KAcrB,OAZIT,GAAYC,GAAUC,GAAcC,GAAQC,IAC9CI,GAAoB,EAEpBC,EAAiB,CACfT,WACAC,SACAC,aACAC,OACAC,SAKF,kBAACM,EAAA,EAAD,KACE,+BAAQ,uDAAR,KACE,kBAACC,EAAA,EAAD,KACA,kBAACnC,EAAA,EAAKoC,MAAN,CAAYC,SAAO,GACjB,kBAACrC,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKsC,MAAN,CAAYC,IAAKC,MACjB,kBAACxC,EAAA,EAAKyC,QAAN,KACE,kBAACzC,EAAA,EAAK0C,KAAN,+IAIE,6BACA,6BALF,kEAOE,wBAAIzC,MAAO,CAAC0C,SAAS,OAAQC,WAAW,MACxC,2EACA,wEACA,8EACA,oDAGF,kBAAC5C,EAAA,EAAKzB,OAAN,KACE,2DAEF,6BAEA,kBAAC8B,EAAA,EAAO+B,MAAR,KACGjB,EAAW0B,KAAI,SAAAC,GAAI,OAClB,kBAACzC,EAAA,EAAD,CACEJ,MAAO,CAAC8C,UAAW,OACnBnC,IAAKkC,EAAKhC,MACVkC,OAAQ,EAAKlB,SAAS,gBAAkBgB,EAAKhC,MAC7CL,QAAS,SAAC3B,GACR,EAAK+C,SAAS,aAAciB,EAAKhC,SALrC,IAOGgC,EAAKjC,KAPR,SAWJ,kBAACb,EAAA,EAAK0C,KAAN,KACE,kBAACO,EAAA,EAAD,CACEC,WAAS,EACTC,cAAc,UACfxC,EAAWkC,KAAI,SAAAC,GAAI,OAClB,kBAACG,EAAA,EAAKjD,KAAN,CACEC,MAAO,CAACC,MAAO,SACfU,IAAKkC,EAAKhC,MACVkC,OAAQ,EAAKlB,SAAS,cAAgBgB,EAAKhC,MAC3CL,QAAS,SAAA3B,GAAC,OAAI,EAAK+C,SAAS,WAAYiB,EAAKhC,SAC1CgC,EAAKjC,UAKZ,kBAACuC,EAAA,EAAD,CACEnD,MAAO,CAACoD,QAAS,QACjBC,OAAK,EACLJ,WAAS,EACTnB,KAAK,SACLwB,YAAY,0BACZC,QAASzC,EACT0C,aAAc,EACdC,SAAU,SAAC5E,EAAD,GAAyB,IAAnBiD,EAAkB,EAAlBA,KAAMjB,EAAY,EAAZA,MACpB6C,QAAQC,KAAK7B,EAAMjB,SAAcA,GACjC,EAAKe,SAASE,EAAMjB,MAIxB,kBAACsC,EAAA,EAAD,CACEnD,MAAO,CAACoD,QAAS,QACjBC,OAAK,EACLJ,WAAS,EACTnB,KAAK,OACLwB,YAAY,wBACZC,QAASnC,EACToC,aAAa,WACbC,SAAU,SAAC5E,EAAD,GAAyB,IAAnBiD,EAAkB,EAAlBA,KAAMjB,EAAY,EAAZA,MACpB6C,QAAQC,KAAK7B,EAAMjB,GACnB,EAAKe,SAASE,EAAMjB,OAI1B,kBAACd,EAAA,EAAK6D,MAAN,KACG7B,EACC,kBAAC3B,EAAA,EAAD,CACEyD,SAAO,EACPxD,QAAQ,eACRG,QAAS,kBAAM,EAAKjC,MAAMuF,UAAU9B,IACpClC,KAAK,MACLQ,KAAK,OACLC,cAAc,SAGhB,kBAACH,EAAA,EAAD,CACE2D,UAAQ,EACRF,SAAO,EACPxD,QAAQ,kBACRP,KAAK,MACLQ,KAAK,OACLC,cAAc,SAIlB,6BACA,kBAAC4C,EAAA,EAAD,CACEE,OAAK,EACLJ,WAAS,EACTnB,KAAK,OACLwB,YAAY,qCACZE,aAAc,EACdD,QAASlC,EACToC,SAAU,SAAC5E,EAAD,OAAMiD,EAAN,EAAMA,KAAMjB,EAAZ,EAAYA,MAAZ,OACR,EAAKe,SAASE,EAAMjB,WASlC,kC,GApKWJ,a,4DCLJuD,EAZA,SAAC,GAAD,IAAGpD,EAAH,EAAGA,KAAH,OACb,kBAACqB,EAAA,EAAD,KACE,kBAACgC,EAAA,EAAD,CAAS3D,MAAI,EAACR,KAAK,OACjB,kBAACoE,EAAA,EAAD,CAAMpC,KAAK,iBAAiBqC,SAAO,IACnC,kBAACF,EAAA,EAAQzB,QAAT,KACE,kBAACyB,EAAA,EAAQ3F,OAAT,wBACCsC,GAAQ,uC,SCqEFwD,E,YAvEb,WAAY7F,GAAQ,IAAD,sBACjB,4CAAMA,IAEN,IAAM8F,EAAsC,IAAtB9F,EAAM8F,cAHX,OAKjB,EAAK7F,MAAQ,CACX8F,WAAY,EACZC,UAAWF,EACXG,UAAWH,GARI,E,0EAYL,IAAD,OACXnF,KAAKuF,MAAQC,aAAY,WACvB,IAAMC,EAAU,EAAKnG,MAAM+F,UAAY,IAEnCI,GAAW,EACb,EAAK5F,SAAS,CACZwF,UAAWI,KAGbC,cAAc,EAAKH,OACnBI,IAAKC,KAAK,CACRC,MAAO,kBACPrD,KAAM,OACN+C,MAAO,IACPO,QAAS,WACP,EAAKzG,MAAM0G,gBAIhB,O,0CAIH/F,KAAKgG,e,6CAILN,cAAc1F,KAAKuF,OADE,MAGYvF,KAAKV,MAA9B+F,EAHa,EAGbA,UAAWC,EAHE,EAGFA,UACnBtF,KAAKX,MAAM4G,WAAWZ,EAAWC,K,+BAGzB,ICpDUY,EDqDVb,EAAcrF,KAAKV,MAAnB+F,UADD,GCpDWa,EDsDgCb,EC/C7C,CACLc,OAPa,IAAMC,KAAKC,MAAOH,EAAe,KAAW,KAAKI,OAAO,GAQrEC,SAPe,IAAMH,KAAKC,MAAOH,EAAe,IAAS,KAAKI,OAAO,GAQrEE,SAPe,IAAOJ,KAAKC,MAAOH,EAAe,IAAQ,IAAM,IAAKI,OACnE,KDkDOH,EAFD,EAECA,MAAOI,EAFR,EAEQA,QAASC,EAFjB,EAEiBA,QAExB,OACE,kBAACtF,EAAA,EAAO+B,MAAR,CAAcrC,KAAK,UAAU6F,OAAK,EAACC,QAAQ,SACzC,kBAACC,EAAA,EAAD,CACExF,QAAQ,QACRyF,QAAS,kBAAC1F,EAAA,EAAD,CAAQ2C,QAAM,GAAEsC,GACzBlF,SAAS,gBAEX,kBAAC0F,EAAA,EAAD,CACExF,QAAQ,UACRyF,QAAS,kBAAC1F,EAAA,EAAD,CAAQ2C,QAAM,GAAE0C,GACzBtF,SAAS,gBAEX,kBAAC0F,EAAA,EAAD,CACExF,QAAQ,UACRyF,QAAS,kBAAC1F,EAAA,EAAD,CAAQ2C,QAAM,GAAE2C,GACzBvF,SAAS,qB,GAjEKM,a,SEsBTsF,EAzBJ,SAAC,GAAD,IAAGC,EAAH,EAAGA,oBAAH,OACT,kBAACC,EAAA,EAAD,CAAOC,QAAM,EAACC,SAAO,GACnB,kBAACF,EAAA,EAAM3H,OAAP,KACE,kBAAC2H,EAAA,EAAMG,IAAP,KACE,kBAACH,EAAA,EAAMI,WAAP,YACA,kBAACJ,EAAA,EAAMI,WAAP,kBACA,kBAACJ,EAAA,EAAMI,WAAP,uBACA,kBAACJ,EAAA,EAAMI,WAAP,wBACA,kBAACJ,EAAA,EAAMI,WAAP,iBAGJ,kBAACJ,EAAA,EAAMK,KAAP,KACGN,EAAoBpD,KAAI,SAACC,EAAM9B,GAAP,OACvB,kBAACkF,EAAA,EAAMG,IAAP,CAAWzF,IAAKI,EAAI,GAClB,kBAACkF,EAAA,EAAMM,KAAP,KAAaxF,EAAI,GACjB,kBAACkF,EAAA,EAAMM,KAAP,KAAa1D,EAAK2D,UAClB,kBAACP,EAAA,EAAMM,KAAP,KAAa1D,EAAK4D,aAClB,kBAACR,EAAA,EAAMM,KAAP,KAAa1D,EAAK6D,gBAClB,kBAACT,EAAA,EAAMM,KAAP,KAAa1D,EAAK8D,cC0BbC,E,YAzCb,WAAYrI,GAAQ,IAAD,8BACjB,4CAAMA,KAEDC,MAAQ,CACXqI,UAAW,SAGb,EAAKC,eAAiB,EAAKA,eAAe7H,KAApB,gBAPL,E,4EAUJJ,E,GAAc,IAATiD,EAAQ,EAARA,KAClB5C,KAAKH,SAAS,CAAE8H,UAAW/E,M,+BAGnB,IAAD,EAIH5C,KAAKX,MAFPyH,EAFK,EAELA,oBACAe,EAHK,EAGLA,WAGF,OACE,kBAAC9E,EAAA,EAAD,KACE,2HAIA,kBAAC,EAAD,CAAI+D,oBAAqBA,IACzB,kBAAC5F,EAAA,EAAD,CACEH,MAAM,OACNI,QAAQ,cACRG,QAASuG,EACTjH,KAAK,MACLQ,KAAK,OACLC,cAAc,OACdP,MAAO,CAAEgH,aAAc,U,GAnCZvG,aCUNwG,EAZC,kBACd,kBAAChF,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAASoB,aAAW,GAClB,kBAAC,IAAD,CAAQhD,MAAI,GACV,kBAAC4D,EAAA,EAAD,CAAMpC,KAAK,WACX,6BAFF,2E,iBCNAoF,EAAkB,SAACC,EAAKC,GAI5B,OAHAD,EAAM7B,KAAK+B,KAAKF,GAChBC,EAAM9B,KAAKC,MAAM6B,GAEV9B,KAAKC,MAAMD,KAAKgC,UAAYF,EAAMD,EAAM,IAAMA,GCsVxCI,E,YAnUb,WAAYhJ,GAAQ,IAAD,8BACjB,4CAAMA,KAEDC,MAAQ,CACXgJ,SAAU,KACVC,WAAW,EACXC,cAAe,EACfC,eAAgB,EAChBC,eAAgB,KAChBC,iBAAiB,EACjB7B,oBAAqB,GACrB8B,WAAW,GAGb,EAAKC,yBAAsBC,EAE3B,EAAKC,QAAU,EAAKA,QAAQhJ,KAAb,gBACf,EAAKiJ,gBAAkB,EAAKA,gBAAgBjJ,KAArB,gBACvB,EAAKkJ,WAAa,EAAKA,WAAWlJ,KAAhB,gBAClB,EAAKgG,QAAU,EAAKA,QAAQhG,KAAb,gBACf,EAAKkG,WAAa,EAAKA,WAAWlG,KAAhB,gBAClB,EAAKmJ,aAAe,EAAKA,aAAanJ,KAAlB,gBACpB,EAAKoJ,WAAa,EAAKA,WAAWpJ,KAAhB,gBAClB,EAAKqJ,aAAe,EAAKA,aAAarJ,KAAlB,gBACpB,EAAKsJ,aAAe,EAAKA,aAAatJ,KAAlB,gBAxBH,E,iFA2BE,IAAD,OACVuJ,EAAQtJ,KAAKX,MAAbiK,IAERC,MAAMD,GACHnJ,MAAK,SAAAqJ,GAAO,OAAIA,EAAQC,UACxBtJ,MAAK,SAAAC,GAAM,OAAIsJ,YAAW,kBAAM,EAAKX,QAAQ3I,EAAOuJ,WAAU,QAC9DC,OAAM,SAAAC,GAAK,OAAIH,YAAW,kBAAM,EAAKL,aAAaQ,KAAQ,U,mCAGlDA,GACNC,UAAUC,QAIb/J,KAAKH,SAAS,CAAE+I,WAAW,IAC3BpE,QAAQwF,IAAI,mBAAoBH,KAJhC7J,KAAKH,SAAS,CAAE+I,WAAW,IAC3BpE,QAAQwF,IAAI,yB,8BAORL,GAAU,IAAD,OACf,GAAuB,IAAnBA,EAAQM,OAAc,CAOxB,OAAOtE,IAAKC,KAAK,CACfC,MAAO,UACPqE,KAPA,+MAQA1H,KAAM,QACN+C,MAAO,IACPO,QAAS,WACP,EAAKzG,MAAMwI,gBAKjB,IAAMS,EAAWqB,EACTnB,EAAkBxI,KAAKV,MAAvBkJ,cACF2B,EAASnC,EAAgB,EAAG,GAC5B3D,EAAO,YAAOiE,EAASE,GAAe4B,mBAC5C/F,EAAQgG,OAAOF,EAAQ,EAAG7B,EAASE,GAAehB,gBAElDxH,KAAKH,SAAS,CAAEyI,WAAUC,WAAW,EAAOlE,UAAS8F,a,sCAGvCxK,E,GAAc,IAATiD,EAAQ,EAARA,KACnB5C,KAAKH,SAAS,CAAE6I,eAAgB9F,M,mCAGpB,IAAD,EAOP5C,KAAKV,MALPoJ,EAFS,EAETA,eACAJ,EAHS,EAGTA,SACAE,EAJS,EAITA,cACAC,EALS,EAKTA,eACA3B,EANS,EAMTA,oBAGEW,EAAQ,EACZ,GAAIiB,IAAmB4B,IAAGC,OAAOjC,EAASE,GAAehB,gBAAiB,CACtE,IAAIgD,EAAoBlC,EAASE,GAAejG,WAEhDkF,GADA+C,EAAoBxI,EAAWyI,MAAK,SAAAC,GAAE,OAAIA,EAAGjJ,MAAQ+I,MAC3BvI,OAU9B,GAPA6E,EAAoB/E,KAAK,CACvBuF,SAAUgD,IAAGC,OAAOjC,EAASE,GAAelB,UAC5CC,YAAamB,EACblB,eAAgB8C,IAAGC,OAAOjC,EAASE,GAAehB,gBAClDC,UAGEe,IAAkBF,EAAS2B,OAAS,EAAxC,CAcA,IAAME,EAASnC,EAAgB,EAAG,GAE5B3D,EAAO,YAAOiE,EAASE,EAAgB,GAAG4B,mBAChD/F,EAAQgG,OAAOF,EAAQ,EAAG7B,EAASE,EAAgB,GAAGhB,gBAEtDxH,KAAKH,SAAS,CACZ4I,eAAgBA,EAAiBhB,EACjCe,cAAeA,EAAgB,EAC/BE,eAAgB,KAChBrE,UACA8F,SACArD,6BAxBA9G,KAAKH,SAAS,CACZ4I,eAAgBA,EAAiBhB,EACjCiB,eAAgB,KAChBH,WAAW,EACXI,iBAAiB,EACjBH,cAAe,EACfnE,QAAS,KACTyC,0B,gCAsBJ9G,KAAKH,SAAS,CACZ6I,eAAgB,KAChBH,WAAW,EACXI,iBAAiB,EACjBH,cAAe,EACfnE,QAAS,S,iCAIFgB,EAAWC,GACpBtF,KAAK6I,oBAAsB,CACzBxD,YACAC,e,qCAIY,IAAD,OACboE,YAAW,WAAO,IAAD,EAC2C,EAAKpK,MAAvDgJ,EADO,EACPA,SAAUG,EADH,EACGA,eAAgB3B,EADnB,EACmBA,oBAC1Be,EAAe,EAAKxI,MAApBwI,WAEF8C,EACJ,kBAAC,EAAD,CACEC,eAAgBtC,EAAS2B,OACzBxB,eAAgBA,EAChBI,oBAAqB,EAAKA,oBAC1B/B,oBAAqBA,EACrBqC,WAAY,EAAKA,WACjBtB,WAAYA,IAIhB,EAAKhI,SAAS,CAAE8K,YAAW7D,oBAAqB,OAC/C,O,mCAGS,IAAD,EACyB9G,KAAKV,MAAjCgJ,EADG,EACHA,SAAUE,EADP,EACOA,cACZ2B,EAASnC,EAAgB,EAAG,GAC5B3D,EAAO,YAAOiE,EAASE,GAAe4B,mBAC5C/F,EAAQgG,OAAOF,EAAQ,EAAG7B,EAASE,GAAehB,gBAElDxH,KAAKH,SAAS,CACZ4I,eAAgB,EAChBE,iBAAiB,EACjBS,cAAc,EACd/E,UACA8F,a,qCAIY,IAAD,OACbT,YAAW,WACT,EAAK7J,SAAS,CAAE0I,WAAW,EAAOa,cAAc,EAAOuB,UAAW,SACjE,O,+BAGK,IAAD,SAaH3K,KAAKV,MAXPgJ,EAFK,EAELA,SACAE,EAHK,EAGLA,cACAnE,EAJK,EAILA,QACAqE,EALK,EAKLA,eACAH,EANK,EAMLA,UACAI,EAPK,EAOLA,gBACAgC,EARK,EAQLA,UACAvB,EATK,EASLA,aACAR,EAVK,EAULA,UAkBF,OATID,IAAoBgC,GACtB3K,KAAKkJ,eAIHE,GACFpJ,KAAKoJ,eAIL,kBAACvI,EAAA,EAAKzB,OAAN,MACIwJ,IAAcD,GAAmBJ,GAAa,kBAAC,EAAD,OAE9CK,IAAcL,GACd,kBAACxF,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACnC,EAAA,EAAKoC,MAAN,CAAYC,SAAO,GACjB,kBAACrC,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKyC,QAAN,KACE,kBAACzC,EAAA,EAAK6D,MAAN,KACE,kBAAC,IAAD,CAAQmG,GAAG,KAAKC,OAAK,EAACpE,QAAQ,QAC5B,kBAAC,IAAOpD,QAAR,KACCgF,EAASE,GAAenG,SADzB,SAGEiG,EAASE,GAAejG,WAH1B,MAMF,kBAAC,EAAD,CACE4C,cAAenF,KAAKX,MAAM8F,cAC1BY,QAAS/F,KAAK+F,QACdE,WAAYjG,KAAKiG,cAGrB,6BACA,kBAACpF,EAAA,EAAK0C,KAAN,KACE,kBAACwB,EAAA,EAAD,CAASnE,KAAK,OAAOmK,UAAQ,GAC3B,wCAAUT,IAAGC,OACXjC,EAASE,GAAelB,aAG5B,6BACA,kBAACzG,EAAA,EAAKmK,YAAN,KACE,4EAEF,kBAACC,EAAA,EAAD,MACA,kBAACxK,EAAA,EAAD,CAAMyK,UAAQ,EAAC/G,OAAK,EAACvD,KAAK,WACvByD,EAAQX,KAAI,SAACyH,EAAQtJ,GACpB,IAAIuJ,EAEJ,OAAQvJ,GACN,KAAK,EACHuJ,EAAS,KACT,MACF,KAAK,EACHA,EAAS,KACT,MACF,KAAK,EACHA,EAAS,KACT,MACF,KAAK,EACHA,EAAS,KACT,MACF,QACEA,EAASvJ,EAIb,IAAMwJ,EAAgBf,IAAGC,OAAOY,GAEhC,OACE,kBAAC1K,EAAA,EAAKI,KAAN,CACEY,IAAK4J,EACLzI,KAAMyI,EACNxH,OAAQ6E,IAAmB2C,EAC3B/J,QAAS,EAAK0H,iBAEd,uBAAGlI,MAAO,CAAEwK,YAAa,QAAUF,GAClCC,QAMX,kBAACJ,EAAA,EAAD,MACA,kBAACpK,EAAA,EAAK6D,MAAN,KACE,kBAACxD,EAAA,EAAD,CACEyD,SAAO,EACPxD,QAAQ,OACRG,QAAStB,KAAKiJ,WACdvC,QAAQ,QACR9F,KAAK,MACLQ,KAAK,gBACLC,cAAc,QACdwD,UAAW6D,SAOvB,8BAIHC,IAAoBgC,GACnB,kBAAC,EAAD,CAAQjJ,KAAK,yBAGdiH,GAAmBgC,EAEnB/B,GAAa,kBAAC,EAAD,W,GA9THrH,aC4CJgK,G,YAxDb,WAAYlM,GAAQ,IAAD,8BACjB,4CAAMA,KAEDC,MAAQ,CACXkM,aAAa,EACblC,IAAK,KACLnE,cAAe,KACfoD,WAAW,GAGb,EAAK3D,UAAY,EAAKA,UAAU7E,KAAf,gBACjB,EAAK8H,WAAa,EAAKA,WAAW9H,KAAhB,gBAXD,E,uEAcT+C,GAAiB,IACjBT,EAA6CS,EAA7CT,SAAUC,EAAmCQ,EAAnCR,OAAQC,EAA2BO,EAA3BP,WAAYC,EAAeM,EAAfN,KAAMC,EAASK,EAATL,KAEtC6G,EAAG,UAAMmC,sCAAqBnJ,EAA3B,YCxBI,YDyBXD,EADO,YCvBM,cDwBYE,EADlB,YCtBA,QDuBuCC,GAEhDxC,KAAKH,SAAS,CAAE2L,aAAa,EAAMlC,MAAKnE,cAAe1C,M,mCAG3C,IAAD,OACXzC,KAAKH,SAAS,CAAE0I,WAAW,IAE3BmB,YAAW,WACT,EAAK7J,SAAS,CACZ2L,aAAa,EACblC,IAAK,KACLnE,cAAe,KACfoD,WAAW,MAEZ,O,+BAGK,IAAD,EACgDvI,KAAKV,MAApDkM,EADD,EACCA,YAAalC,EADd,EACcA,IAAKnE,EADnB,EACmBA,cAAeoD,EADlC,EACkCA,UAEzC,OACE,kBAAC,WAAD,KACE,kBAAC,EAAD,OACEA,IAAciD,GAAe,kBAAC,EAAD,CAAM5G,UAAW5E,KAAK4E,aACnD2D,GAAaiD,GACb,kBAAC,EAAD,CACElC,IAAKA,EACLnE,cAAeA,EACf0C,WAAY7H,KAAK6H,aAGpBU,GAAa,kBAAC,EAAD,W,GAnDJhH,aEPZmK,GAAcC,QACW,cAA7BlM,OAAOmM,SAASC,UAEe,UAA7BpM,OAAOmM,SAASC,UAEhBpM,OAAOmM,SAASC,SAASC,MACvB,2DAqCN,SAASC,GAAgBC,EAAOC,GAC9BnC,UAAUoC,cACPC,SAASH,GACT7L,MAAK,SAAAiM,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBhN,QACfwK,UAAUoC,cAAcO,WAUtBR,GAAUA,EAAOS,UACnBT,EAAOS,SAASN,IAOlBzG,IAAKC,KAAK,CACR+G,MAAO,OACP1L,SAAU,SACVuB,KAAM,UACNqD,MAAO,gCACP+G,mBAAmB,EACnBrH,MAAO,MAIL0G,GAAUA,EAAOY,WACnBZ,EAAOY,UAAUT,WAO5BxC,OAAM,SAAAC,GACLrF,QAAQqF,MAAM,4CAA6CA,M,OCtFjEiD,IAASC,OAAO,kBAAC,GAAD,MAASC,SAASC,eAAe,SDK1C,SAAkBhB,GACvB,GAA6C,kBAAmBnC,UAAW,CAGzE,GADkB,IAAIoD,IAAIC,WAAwB1N,OAAOmM,SAASwB,MACpDC,SAAW5N,OAAOmM,SAASyB,OAIvC,OAGF5N,OAAOC,iBAAiB,QAAQ,WAC9B,IAAMsM,EAAK,UAAMmB,WAAN,sBAEPzB,KAuEV,SAAiCM,EAAOC,GAEtC1C,MAAMyC,GACH7L,MAAK,SAAAmN,GAEJ,IAAMC,EAAcD,EAASE,QAAQC,IAAI,gBAEnB,MAApBH,EAASI,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5C7D,UAAUoC,cAAc0B,MAAMzN,MAAK,SAAAiM,GACjCA,EAAayB,aAAa1N,MAAK,WAC7BV,OAAOmM,SAASkC,eAKpB/B,GAAgBC,EAAOC,MAG1BrC,OAAM,eA1FHmE,CAAwB/B,EAAOC,GAI/BnC,UAAUoC,cAAc0B,MAAMzN,MAAK,gBAOnC4L,GAAgBC,EAAOC,OC9B/BC,K","file":"static/js/main.3a810f29.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/birthday1.c10921d4.png\";","const NUM_OF_QUESTIONS = [];\n\nfor (let i = 1; i <= 50; i++) {\n  const object = { key: i, text: `${i}`, value: i };\n  NUM_OF_QUESTIONS.push(object);\n}\n\nexport default NUM_OF_QUESTIONS;\n","import React, { Component } from 'react';\nimport { Menu, Button } from 'semantic-ui-react';\n\nclass Header extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      promptEvent: null,\n      appAccepted: false\n    };\n\n    window.addEventListener('beforeinstallprompt', e => {\n      e.preventDefault();\n      this.setState({ promptEvent: e });\n    });\n\n    this.installApp = this.installApp.bind(this);\n  }\n\n  installApp() {\n    const { promptEvent } = this.state;\n    // console.log('Init Func ==>', promptEvent);\n\n    promptEvent.prompt();\n    promptEvent.userChoice.then(result => {\n      if (result.outcome === 'accepted') {\n        // console.log('User accepted the A2HS prompt');\n        this.setState({ appAccepted: true });\n      } else {\n        // console.log('User dismissed the A2HS prompt');\n      }\n    });\n  }\n\n  render() {\n    const { promptEvent, appAccepted } = this.state;\n    let isAppInstalled = false;\n\n    if (\n      window.matchMedia('(display-mode: standalone)').matches ||\n      appAccepted\n    ) {\n      isAppInstalled = true;\n    }\n\n    return (\n      <Menu stackable inverted size=\"massive\">\n        <Menu.Item>\n          <h1\n            style={{\n              color: '#2185D0',\n              cursor: 'pointer'\n            }}\n          >\n            Dad's Birthday Quiz\n          </h1>\n        </Menu.Item>\n\n        {promptEvent && !isAppInstalled && (\n          <Menu.Menu position=\"right\">\n            <Menu.Item>\n              <Button\n                color=\"teal\"\n                content=\"Install App\"\n                size=\"big\"\n                icon=\"app store\"\n                labelPosition=\"left\"\n                onClick={this.installApp}\n              />\n            </Menu.Item>\n          </Menu.Menu>\n        )}\n      </Menu>\n    );\n  }\n}\n\nexport default Header;\n","const CATEGORIES = [\n  {\n    key: '10',\n    text: 'Entertainment: Books',\n    value: '10'\n  },\n  {\n    key: '11',\n    text: 'Entertainment: Films',\n    value: '11'\n  },\n  {\n    key: '12',\n    text: 'Entertainment: Music',\n    value: '12'\n  },\n  {\n    key: '14',\n    text: 'Entertainment: Television',\n    value: '14'\n  },\n  {\n    key: '17',\n    text: 'Science & Nature',\n    value: '17'\n  },\n  {\n    key: '20',\n    text: 'Mythology',\n    value: '20'\n  },\n  {\n    key: '22',\n    text: 'Geography',\n    value: '22'\n  },\n  {\n    key: '23',\n    text: 'History',\n    value: '23'\n  },\n  {\n    key: '24',\n    text: 'Politics',\n    value: '24'\n  },\n  {\n    key: '25',\n    text: 'Arts',\n    value: '25'\n  },\n];\n\nexport default CATEGORIES;\n","const COUNTDOWN_TIME = [];\n\nfor (let i = 1; i <= 60; i++) {\n  const object = { key: i, text: `Timer: ${i} minutes`, value: i };\n  COUNTDOWN_TIME.push(object);\n}\n\nexport default COUNTDOWN_TIME;\n","const DIFFICULTY = [\n  {\n    key: 'easy',\n    text: 'Easy (1 point)',\n    value: 'easy',\n    points: 1,\n  },\n  {\n    key: 'medium',\n    text: 'Medium (2 points)',\n    value: 'medium',\n    points: 2,\n  },\n  {\n    key: 'hard',\n    text: 'Hard (3 points)' ,\n    value: 'hard',\n    points: 3,\n  }\n];\n\nexport default DIFFICULTY;\n","const QUESTIONS_TYPE = [\n  {\n    key: '0',\n    text: 'Any Type',\n    value: '0'\n  },\n  {\n    key: 'multiple',\n    text: 'Multiple Choice',\n    value: 'multiple'\n  },\n  {\n    key: 'boolean',\n    text: 'True / False',\n    value: 'boolean'\n  }\n];\n\nexport default QUESTIONS_TYPE;\n","import React, { Component } from 'react';\nimport {\n  Button,\n  Container,\n  Divider,\n  Dropdown,\n  Item,\n  List,\n  Segment,\n} from 'semantic-ui-react';\nimport birthdayImg from '../../assets/images/birthday1.png';\n\nimport {\n  CATEGORIES,\n  NUM_OF_QUESTIONS,\n  DIFFICULTY,\n  QUESTIONS_TYPE,\n  COUNTDOWN_TIME\n} from '../../constants';\n\nclass Main extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      category: null,\n      numOfQ: 1,\n      difficulty: 'medium',\n      type: 'multiple',\n      time: 2\n    };\n\n    this.setValue = this.setValue.bind(this);\n    this.getValue = this.getValue.bind(this);\n  }\n\n  setValue(name, value) {\n    this.setState({ [name]: value });\n  }\n\n  getValue(name) {\n    return this.state[name];\n  }\n\n  render() {\n    const { category, numOfQ, difficulty, type, time } = this.state;\n\n    let allFieldsSelected = false;\n    let selectedValues = null;\n\n    if (category && numOfQ && difficulty && type && time) {\n      allFieldsSelected = true;\n\n      selectedValues = {\n        category,\n        numOfQ,\n        difficulty,\n        type,\n        time\n      };\n    }\n\n    return (\n      <Container>\n        <style>{\" .ui.selection.list !important { background: blue } \"} </style>\n          <Segment>\n          <Item.Group divided>\n            <Item>\n              <Item.Image src={birthdayImg} />\n              <Item.Content>\n                <Item.Meta>\n                  This page is for use by the designated reader, who\n                  should first ask the current player for their desired\n                  category and difficulty level.\n                  <br/>\n                  <br/>\n                  After every question, the reader and player changes as follows.\n                  <ol style={{fontSize:'16px', lineHeight:'2'}}>\n                  <li>Massachusetts reads a question for Georgia.</li>\n                  <li>Georgia reads a question for California.</li>\n                  <li>California reads a question for Massachusetts.</li>\n                  <li>Go back to step 1.</li>\n                  </ol>\n                </Item.Meta>\n                <Item.Header>\n                  <h2>Get Random Trivia Question</h2>\n                </Item.Header>\n                <br></br>\n\n                <Button.Group>\n                  {DIFFICULTY.map(item => (\n                    <Button\n                      style={{marginTop: '5px'}}\n                      key={item.value}\n                      active={this.getValue('difficulty') === item.value}\n                      onClick={(e) => {\n                        this.setValue('difficulty', item.value)\n                      }}\n                    > {item.text} </Button>\n                  ))}\n                </Button.Group>\n\n                <Item.Meta>\n                  <List\n                    selection\n                    verticalAlign='middle'>\n                  {CATEGORIES.map(item => (\n                    <List.Item\n                      style={{color: 'black'}}\n                      key={item.value}\n                      active={this.getValue('category') === item.value}\n                      onClick={e => this.setValue('category', item.value)}>\n                        {item.text}\n                    </List.Item>\n                  ))}\n                  </List>\n\n                  <Dropdown\n                    style={{display: 'none'}}\n                    fluid\n                    selection\n                    name=\"numOfQ\"\n                    placeholder=\"Select No. of Questions\"\n                    options={NUM_OF_QUESTIONS}\n                    defaultValue={1}\n                    onChange={(e, { name, value }) => {\n                      console.info(name, value, typeof value);\n                      this.setValue(name, value)\n                    }\n                    }\n                  />\n                  <Dropdown\n                    style={{display: 'none'}}\n                    fluid\n                    selection\n                    name=\"type\"\n                    placeholder=\"Select Questions Type\"\n                    options={QUESTIONS_TYPE}\n                    defaultValue=\"multiple\"\n                    onChange={(e, { name, value }) => {\n                      console.info(name, value);\n                      this.setValue(name, value);\n                    } }\n                  />\n                </Item.Meta>\n                <Item.Extra>\n                  {allFieldsSelected ? (\n                    <Button\n                      primary\n                      content=\"Get Question\"\n                      onClick={() => this.props.startQuiz(selectedValues)}\n                      size=\"big\"\n                      icon=\"play\"\n                      labelPosition=\"left\"\n                    />\n                  ) : (\n                    <Button\n                      disabled\n                      primary\n                      content=\"Create Question\"\n                      size=\"big\"\n                      icon=\"play\"\n                      labelPosition=\"left\"\n                    />\n                  )}\n\n                  <br />\n                  <Dropdown\n                    fluid\n                    selection\n                    name=\"time\"\n                    placeholder=\"Select Countdown Time (In Minutes)\"\n                    defaultValue={5}\n                    options={COUNTDOWN_TIME}\n                    onChange={(e, { name, value }) =>\n                      this.setValue(name, value)\n                    }\n                  />\n\n                </Item.Extra>\n              </Item.Content>\n            </Item>\n          </Item.Group>\n        </Segment>\n        <br />\n      </Container>\n    );\n  }\n}\n\nexport default Main;\n","import React from 'react';\nimport { Container, Message, Icon } from 'semantic-ui-react';\n\nconst Loader = ({ text }) => (\n  <Container>\n    <Message icon size=\"big\">\n      <Icon name=\"circle notched\" loading />\n      <Message.Content>\n        <Message.Header>Just one second</Message.Header>\n        {text || 'Fetching from trivia database...'}\n      </Message.Content>\n    </Message>\n  </Container>\n);\n\nexport default Loader;\n","import React, { Component } from 'react';\nimport { Button, Popup } from 'semantic-ui-react';\nimport Swal from 'sweetalert2';\n\nimport { timeConverter } from '../../utils/timeConverter';\n\nclass Countdown extends Component {\n  constructor(props) {\n    super(props);\n\n    const countdownTime = props.countdownTime * 60000;\n\n    this.state = {\n      timerStart: 0,\n      timerTime: countdownTime,\n      totalTime: countdownTime\n    };\n  }\n\n  startTimer() {\n    this.timer = setInterval(() => {\n      const newTime = this.state.timerTime - 1000;\n\n      if (newTime >= 0) {\n        this.setState({\n          timerTime: newTime\n        });\n      } else {\n        clearInterval(this.timer);\n        Swal.fire({\n          title: 'YOUR TIME IS UP',\n          type: 'info',\n          timer: 5000,\n          onClose: () => {\n            this.props.timesUp();\n          }\n        });\n      }\n    }, 1000);\n  }\n\n  componentDidMount() {\n    this.startTimer();\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timer);\n\n    const { timerTime, totalTime } = this.state;\n    this.props.timeAmount(timerTime, totalTime);\n  }\n\n  render() {\n    const { timerTime } = this.state;\n    const { hours, minutes, seconds } = timeConverter(timerTime);\n\n    return (\n      <Button.Group size=\"massive\" basic floated=\"right\">\n        <Popup\n          content=\"Hours\"\n          trigger={<Button active>{hours}</Button>}\n          position=\"bottom left\"\n        />\n        <Popup\n          content=\"Minutes\"\n          trigger={<Button active>{minutes}</Button>}\n          position=\"bottom left\"\n        />\n        <Popup\n          content=\"Seconds\"\n          trigger={<Button active>{seconds}</Button>}\n          position=\"bottom left\"\n        />\n      </Button.Group>\n    );\n  }\n}\n\nexport default Countdown;\n","const timeConverter = milliseconds => {\n  const hours = ('0' + Math.floor((milliseconds / 3600000) % 60)).slice(-2);\n  const minutes = ('0' + Math.floor((milliseconds / 60000) % 60)).slice(-2);\n  const seconds = ('0' + (Math.floor((milliseconds / 1000) % 60) % 60)).slice(\n    -2\n  );\n\n  return {\n    hours,\n    minutes,\n    seconds\n  };\n};\n\nexport { timeConverter };\n","import React from 'react';\nimport { Table } from 'semantic-ui-react';\n\nconst QA = ({ questionsAndAnswers }) => (\n  <Table celled striped>\n    <Table.Header>\n      <Table.Row>\n        <Table.HeaderCell>No.</Table.HeaderCell>\n        <Table.HeaderCell>Questions</Table.HeaderCell>\n        <Table.HeaderCell>Chosen Answers</Table.HeaderCell>\n        <Table.HeaderCell>Correct Answers</Table.HeaderCell>\n        <Table.HeaderCell>Points</Table.HeaderCell>\n      </Table.Row>\n    </Table.Header>\n    <Table.Body>\n      {questionsAndAnswers.map((item, i) => (\n        <Table.Row key={i + 1}>\n          <Table.Cell>{i + 1}</Table.Cell>\n          <Table.Cell>{item.question}</Table.Cell>\n          <Table.Cell>{item.user_answer}</Table.Cell>\n          <Table.Cell>{item.correct_answer}</Table.Cell>\n          <Table.Cell>{item.point}</Table.Cell>\n        </Table.Row>\n      ))}\n    </Table.Body>\n  </Table>\n);\n\nexport default QA;\n","import React, { Component } from 'react';\nimport { Container, Button } from 'semantic-ui-react';\n\nimport QA from './QA';\n\nclass Result extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      activeTab: 'Stats'\n    };\n\n    this.handleTabClick = this.handleTabClick.bind(this);\n  }\n\n  handleTabClick(e, { name }) {\n    this.setState({ activeTab: name });\n  }\n\n  render() {\n    const {\n      questionsAndAnswers,\n      backToHome\n    } = this.props;\n\n    return (\n      <Container>\n        <p>\n          If the player answered correctly, please remind the scorekeeper\n          how many points they gained.\n        </p>\n        <QA questionsAndAnswers={questionsAndAnswers} />\n        <Button\n          color=\"teal\"\n          content=\"Ask Another\"\n          onClick={backToHome}\n          size=\"big\"\n          icon=\"home\"\n          labelPosition=\"left\"\n          style={{ marginBottom: 8 }}\n        />\n      </Container>\n    );\n  }\n}\n\nexport default Result;\n","import React from 'react';\nimport { Container, Segment, Header, Icon } from 'semantic-ui-react';\n\nconst Offline = () => (\n  <Container>\n    <Segment placeholder>\n      <Header icon>\n        <Icon name=\"unlink\" />\n        <br />\n        It looks like you're offline, Please check your internet connection.\n      </Header>\n    </Segment>\n  </Container>\n);\n\nexport default Offline;\n","const getRandomNumber = (min, max) => {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\nexport { getRandomNumber };\n","import React, { Component } from 'react';\nimport {\n  Container,\n  Segment,\n  Item,\n  Divider,\n  Button,\n  Message,\n  Menu,\n  Header\n} from 'semantic-ui-react';\nimport Swal from 'sweetalert2';\n\nimport Loader from '../Loader';\nimport Countdown from '../Countdown';\nimport Result from '../Result';\nimport Offline from '../Offline';\n\nimport he from 'he';\nimport { getRandomNumber } from '../../utils/getRandomNumber';\nimport { DIFFICULTY } from '../../constants';\n\nclass Quiz extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      quizData: null,\n      isLoading: true,\n      questionIndex: 0,\n      correctAnswers: 0,\n      userSlectedAns: null,\n      quizIsCompleted: false,\n      questionsAndAnswers: [],\n      isOffline: false\n    };\n\n    this.timeTakesToComplete = undefined;\n\n    this.setData = this.setData.bind(this);\n    this.handleItemClick = this.handleItemClick.bind(this);\n    this.handleNext = this.handleNext.bind(this);\n    this.timesUp = this.timesUp.bind(this);\n    this.timeAmount = this.timeAmount.bind(this);\n    this.renderResult = this.renderResult.bind(this);\n    this.retakeQuiz = this.retakeQuiz.bind(this);\n    this.startNewQuiz = this.startNewQuiz.bind(this);\n    this.resolveError = this.resolveError.bind(this);\n  }\n\n  componentDidMount() {\n    const { API } = this.props;\n\n    fetch(API)\n      .then(respone => respone.json())\n      .then(result => setTimeout(() => this.setData(result.results), 1000))\n      .catch(error => setTimeout(() => this.resolveError(error), 1000));\n  }\n\n  resolveError(error) {\n    if (!navigator.onLine) {\n      this.setState({ isOffline: true });\n      console.log('Connection problem');\n    } else {\n      this.setState({ isOffline: true });\n      console.log('API problem ==> ', error);\n    }\n  }\n\n  setData(results) {\n    if (results.length === 0) {\n      const message =\n        \"The API doesn't have enough questions for your query<br />\" +\n        '(ex. Asking for 50 questions in a category that only has 20).' +\n        '<br /><br />Please change number of questions, difficulty level ' +\n        'or type of questions.';\n\n      return Swal.fire({\n        title: 'Oops...',\n        html: message,\n        type: 'error',\n        timer: 10000,\n        onClose: () => {\n          this.props.backToHome();\n        }\n      });\n    }\n\n    const quizData = results;\n    const { questionIndex } = this.state;\n    const outPut = getRandomNumber(0, 3);\n    const options = [...quizData[questionIndex].incorrect_answers];\n    options.splice(outPut, 0, quizData[questionIndex].correct_answer);\n\n    this.setState({ quizData, isLoading: false, options, outPut });\n  }\n\n  handleItemClick(e, { name }) {\n    this.setState({ userSlectedAns: name });\n  }\n\n  handleNext() {\n    const {\n      userSlectedAns,\n      quizData,\n      questionIndex,\n      correctAnswers,\n      questionsAndAnswers\n    } = this.state;\n\n    let point = 0;\n    if (userSlectedAns === he.decode(quizData[questionIndex].correct_answer)) {\n        let currentDifficulty = quizData[questionIndex].difficulty;\n        currentDifficulty = DIFFICULTY.find(el => el.key === currentDifficulty);\n        point = currentDifficulty.points;\n    }\n\n    questionsAndAnswers.push({\n      question: he.decode(quizData[questionIndex].question),\n      user_answer: userSlectedAns,\n      correct_answer: he.decode(quizData[questionIndex].correct_answer),\n      point\n    });\n\n    if (questionIndex === quizData.length - 1) {\n      this.setState({\n        correctAnswers: correctAnswers + point,\n        userSlectedAns: null,\n        isLoading: true,\n        quizIsCompleted: true,\n        questionIndex: 0,\n        options: null,\n        questionsAndAnswers\n      });\n\n      return;\n    }\n\n    const outPut = getRandomNumber(0, 3);\n\n    const options = [...quizData[questionIndex + 1].incorrect_answers];\n    options.splice(outPut, 0, quizData[questionIndex + 1].correct_answer);\n\n    this.setState({\n      correctAnswers: correctAnswers + point,\n      questionIndex: questionIndex + 1,\n      userSlectedAns: null,\n      options,\n      outPut,\n      questionsAndAnswers\n    });\n  }\n\n  timesUp() {\n    this.setState({\n      userSlectedAns: null,\n      isLoading: true,\n      quizIsCompleted: true,\n      questionIndex: 0,\n      options: null\n    });\n  }\n\n  timeAmount(timerTime, totalTime) {\n    this.timeTakesToComplete = {\n      timerTime,\n      totalTime\n    };\n  }\n\n  renderResult() {\n    setTimeout(() => {\n      const { quizData, correctAnswers, questionsAndAnswers } = this.state;\n      const { backToHome } = this.props;\n\n      const resultRef = (\n        <Result\n          totalQuestions={quizData.length}\n          correctAnswers={correctAnswers}\n          timeTakesToComplete={this.timeTakesToComplete}\n          questionsAndAnswers={questionsAndAnswers}\n          retakeQuiz={this.retakeQuiz}\n          backToHome={backToHome}\n        />\n      );\n\n      this.setState({ resultRef, questionsAndAnswers: [] });\n    }, 2000);\n  }\n\n  retakeQuiz() {\n    const { quizData, questionIndex } = this.state;\n    const outPut = getRandomNumber(0, 3);\n    const options = [...quizData[questionIndex].incorrect_answers];\n    options.splice(outPut, 0, quizData[questionIndex].correct_answer);\n\n    this.setState({\n      correctAnswers: 0,\n      quizIsCompleted: false,\n      startNewQuiz: true,\n      options,\n      outPut\n    });\n  }\n\n  startNewQuiz() {\n    setTimeout(() => {\n      this.setState({ isLoading: false, startNewQuiz: false, resultRef: null });\n    }, 1000);\n  }\n\n  render() {\n    const {\n      quizData,\n      questionIndex,\n      options,\n      userSlectedAns,\n      isLoading,\n      quizIsCompleted,\n      resultRef,\n      startNewQuiz,\n      isOffline\n      // outPut,\n      // correctAnswers,\n    } = this.state;\n\n    // console.log(userSlectedAns);\n    // console.log(questionIndex, outPut);\n    // console.log('Score ==>', correctAnswers);\n\n    if (quizIsCompleted && !resultRef) {\n      this.renderResult();\n      // console.log('Redirecting to result');\n    }\n\n    if (startNewQuiz) {\n      this.startNewQuiz();\n    }\n\n    return (\n      <Item.Header>\n        {!isOffline && !quizIsCompleted && isLoading && <Loader />}\n\n        {!isOffline && !isLoading && (\n          <Container>\n            <Segment>\n              <Item.Group divided>\n                <Item>\n                  <Item.Content>\n                    <Item.Extra>\n                      <Header as=\"h1\" block floated=\"left\">\n                        <Header.Content>\n                        {quizData[questionIndex].category}\n                        &nbsp;\n                        ({quizData[questionIndex].difficulty})\n                        </Header.Content>\n                      </Header>\n                      <Countdown\n                        countdownTime={this.props.countdownTime}\n                        timesUp={this.timesUp}\n                        timeAmount={this.timeAmount}\n                      />\n                    </Item.Extra>\n                    <br />\n                    <Item.Meta>\n                      <Message size=\"huge\" floating>\n                        <b>{`Q. ${he.decode(\n                          quizData[questionIndex].question\n                        )}`}</b>\n                      </Message>\n                      <br />\n                      <Item.Description>\n                        <h3>Please choose one of the following answers:</h3>\n                      </Item.Description>\n                      <Divider />\n                      <Menu vertical fluid size=\"massive\">\n                        {options.map((option, i) => {\n                          let letter;\n\n                          switch (i) {\n                            case 0:\n                              letter = 'A.';\n                              break;\n                            case 1:\n                              letter = 'B.';\n                              break;\n                            case 2:\n                              letter = 'C.';\n                              break;\n                            case 3:\n                              letter = 'D.';\n                              break;\n                            default:\n                              letter = i;\n                              break;\n                          }\n\n                          const decodedOption = he.decode(option);\n\n                          return (\n                            <Menu.Item\n                              key={decodedOption}\n                              name={decodedOption}\n                              active={userSlectedAns === decodedOption}\n                              onClick={this.handleItemClick}\n                            >\n                              <b style={{ marginRight: '8px' }}>{letter}</b>\n                              {decodedOption}\n                            </Menu.Item>\n                          );\n                        })}\n                      </Menu>\n                    </Item.Meta>\n                    <Divider />\n                    <Item.Extra>\n                      <Button\n                        primary\n                        content=\"Next\"\n                        onClick={this.handleNext}\n                        floated=\"right\"\n                        size=\"big\"\n                        icon=\"right chevron\"\n                        labelPosition=\"right\"\n                        disabled={!userSlectedAns}\n                      />\n                    </Item.Extra>\n                  </Item.Content>\n                </Item>\n              </Item.Group>\n            </Segment>\n            <br />\n          </Container>\n        )}\n\n        {quizIsCompleted && !resultRef && (\n          <Loader text=\"Getting your result.\" />\n        )}\n\n        {quizIsCompleted && resultRef}\n\n        {isOffline && <Offline />}\n      </Item.Header>\n    );\n  }\n}\n\nexport default Quiz;\n","import React, { Component, Fragment } from 'react';\n\nimport Header from '../Header';\nimport Main from '../Main';\nimport Quiz from '../Quiz';\nimport Loader from '../Loader';\n\nimport { PATH_BASE, AMOUNT, CATEGORY, DIFFICULTY, TYPE } from '../../api';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isQuizStart: false,\n      API: null,\n      countdownTime: null,\n      isLoading: false\n    };\n\n    this.startQuiz = this.startQuiz.bind(this);\n    this.backToHome = this.backToHome.bind(this);\n  }\n\n  startQuiz(selectedValues) {\n    const { category, numOfQ, difficulty, type, time } = selectedValues;\n\n    const API = `${PATH_BASE + AMOUNT + numOfQ}&${CATEGORY +\n      category}&${DIFFICULTY + difficulty}&${TYPE + type}`;\n\n    this.setState({ isQuizStart: true, API, countdownTime: time });\n  }\n\n  backToHome() {\n    this.setState({ isLoading: true });\n\n    setTimeout(() => {\n      this.setState({\n        isQuizStart: false,\n        API: null,\n        countdownTime: null,\n        isLoading: false\n      });\n    }, 1000);\n  }\n\n  render() {\n    const { isQuizStart, API, countdownTime, isLoading } = this.state;\n\n    return (\n      <Fragment>\n        <Header />\n        {!isLoading && !isQuizStart && <Main startQuiz={this.startQuiz} />}\n        {!isLoading && isQuizStart && (\n          <Quiz\n            API={API}\n            countdownTime={countdownTime}\n            backToHome={this.backToHome}\n          />\n        )}\n        {isLoading && <Loader />}\n      </Fragment>\n    );\n  }\n}\n\nexport default App;\n","const PATH_BASE = 'https://opentdb.com/api.php?';\n\nconst AMOUNT = 'amount=';\nconst CATEGORY = 'category=';\nconst DIFFICULTY = 'difficulty=';\nconst TYPE = 'type=';\n\nexport { PATH_BASE, AMOUNT, CATEGORY, DIFFICULTY, TYPE };\n","import Swal from 'sweetalert2';\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets;\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          // console.log(\n          //   'This web app is being served cache-first by a service worker.'\n          // );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              // console.log(\n              //   'New content is available and will be used when all ' +\n              //     'tabs for this page are closed.'\n              // );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              // console.log('Content is cached for offline use.');\n              Swal.fire({\n                toast: 'true',\n                position: 'bottom',\n                type: 'success',\n                title: 'App is ready to work offline.',\n                showConfirmButton: false,\n                timer: 6000\n              });\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      // console.log(\n      //   'No internet connection found. App is running in offline mode.'\n      // );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport './style.css'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.register();\n"],"sourceRoot":""}